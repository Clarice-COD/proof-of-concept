{% comment %} CHAT FORMULIER {% endcomment %}
<form class="share-questions-form" action="/" method="post" data-miniload="true">
    <h3>Heb je een vraag?</h3>
        <label>Typ hier je vraag
            <textarea name="text" rows="5" cols="28"></textarea>
        </label>
    <button id="submitBtn" class="main-btn verzend-btn" type="submit">Verzend</button>
</form>

{% comment %} SHARED CHATS {% endcomment %}
{% if chats %}  {% comment %} ideal state {% endcomment %}
    <ul id="text-miniload" class="shared-questions-container">
        {% for chat in chats %}
            <li class="shared-question">
                <img class="user-icon" alt="klantprofiel" src="/assets/user-question-icon.svg" width="40">
                <p class="question-text" >{{ chat.text }}</p>
                <time datetime="2025-06-11">11 juni</time>
            </li>
        {% endfor %}  
    </ul>
{% else %} {% comment %} empty state {% endcomment %}
    <div id="text-miniload" class="nothing-found-container">
        <img class="nothing-found-icon" src="/assets/chat-icon.svg" width="40">
        <p class="nothing-found-text">Er zijn nog geen berichten gedeeld. Wees de eerste!</p>
    </div>
{% endif %}

<script type="module">
    
    // EventListener voor een formulier die wordt gesubmit 
    document.addEventListener('submit', async function(event) {

    // Selecteerd specifiek een form voor de submit via eventlisener
    const form = event.target

    // Voeg toe als attribute: form-enhanced true aan de form die je enhanced wilt hebben
    if (!form.hasAttribute('data-miniload')) {
      return
    }

    // Overschrijft de default Loading state van de browser...
    event.preventDefault()

    document.getElementById('submitBtn').classList.add('loader');

    // Verzamel alle formuliervelden van het formulier
    let formData = new FormData(form)

    // Voeg name en value toe aan de submit button indien meerdere submit buttons
    if (event.submitter) {
      formData.append(event.submitter.name, event.submitter.value)
    }

    // Doe een fetch naar de server, net als hoe de browser dit normaal zou doen
    // Gebruik daarvoor het action en method attribuut van het originele formulier
    // Inclusief alle formuliervelden
    const response = await fetch(form.action, {
      method: form.method,
      body: new URLSearchParams(formData)
    })

    // De server redirect op de normale manier, en geeft HTML terug
    // (De server weet niet eens dat deze fetch via client-side JavaScript gebeurde)
    const responseText = await response.text()
    console.log('Response HTML:', responseText)

    // Normaal zou de browser die HTML parsen en weergeven, maar daar moeten we nu zelf iets mee
    // Parse de nieuwe HTML en maak hiervan een nieuw Document Object Model in het geheugen
    const parser = new DOMParser()
    const responseDOM = parser.parseFromString(responseText, 'text/html')


    const newForm = responseDOM.querySelector('[data-miniload="true"]');

    form.outerHTML = newForm.outerHTML;
  
    // success state
    const btn = document.getElementById("submitBtn");
    const textVerstuur = btn.textContent;

    btn.classList.remove("loader")
    btn.textContent = "âœ” Gelukt";

    setTimeout(() => {
        btn.textContent = textVerstuur;
    }, 3000);

  const newChats = responseDOM.querySelector('#text-miniload');
  const currentChats = document.querySelector('#text-miniload');
    currentChats.outerHTML = newChats.outerHTML;
  

  const updatedForm = document.querySelector('[data-miniload="true"]');
  if (updatedForm) updatedForm.reset();
});

</script>

