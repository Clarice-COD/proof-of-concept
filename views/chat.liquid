{% comment %} CHAT FORMULIER {% endcomment %}
<section id="chatSection">
    <form class="share-questions-form" action="/" method="post" data-miniload="true">
        <h3>Heb je een vraag?</h3>
            <label>Typ hier je vraag
                <textarea name="text" rows="5" cols="28" required=""></textarea>
            </label>
        <button id="submitBtn" class="main-btn verzend-btn" type="submit">Verzend</button>
    </form>

    {% comment %} SHARED CHATS {% endcomment %}
    {% if chats %}  {% comment %} ideal state {% endcomment %}
        <ul id="text-miniload" class="shared-questions-container">
            {% for chat in chats %}
                <li class="shared-question">
                    <img class="user-icon" alt="klantprofiel" src="/assets/user-question-icon.svg" width="40" height="50">
                    <p class="question-text" >{{ chat.text }}</p>
                    <time datetime="2025-06-11">11 juni</time>
                </li>
            {% endfor %}  
        </ul>
    {% else %} {% comment %} empty state {% endcomment %}
        <div id="text-miniload" class="nothing-found-container">
            <img class="nothing-found-icon" src="/assets/chat-icon.svg" width="40" height="40">
            <p class="nothing-found-text">Er zijn nog geen berichten gedeeld. Wees de eerste!</p>
        </div>
    {% endif %}
</section>

<script type="module">
    
    // EventListener voor een formulier die wordt gesubmit 
    document.addEventListener('submit', async function(event) {

    // Selecteerd specifiek een form voor de submit via eventlisener
    const form = event.target

    // Voeg toe als attribute: form-enhanced true aan de form die je enhanced wilt hebben
    if (!form.hasAttribute('data-miniload')) {
      return
    }

    // Overschrijft de default Loading state van de browser...
    event.preventDefault()

    // loading state
    document.getElementById('submitBtn').classList.add('loader'); // voegt de class loader aan de submit knop toe, waar een infinite rotate op zit 

    // Verzamel alle formuliervelden van het formulier
    let formData = new FormData(form)

    // Doe een fetch naar de server, net als hoe de browser dit normaal zou doen
    // Gebruik daarvoor het action en method attribuut van het originele formulier
    // Inclusief alle formuliervelden
    const response = await fetch(form.action, {
      method: form.method,
      body: new URLSearchParams(formData)
    })

    // De server redirect op de normale manier, en geeft HTML terug
    // (De server weet niet eens dat deze fetch via client-side JavaScript gebeurde)
    const responseText = await response.text()

    // Normaal zou de browser die HTML parsen en weergeven, maar daar moeten we nu zelf iets mee
    // Parse de nieuwe HTML en maak hiervan een nieuw Document Object Model in het geheugen
    const parser = new DOMParser()
    const responseDOM = parser.parseFromString(responseText, 'text/html')


    const newForm = responseDOM.querySelector('[data-miniload="true"]');

    form.outerHTML = newForm.outerHTML;
  
    // success state
    const btn = document.getElementById("submitBtn"); // selecteerd de button waarop ik wil animeren
    const textVerstuur = btn.textContent;

    btn.classList.remove("loader") // verweiderd de class met animatie loading state
    btn.textContent = "âœ” Gelukt"; // past textuele inhoudt aan naar gelukt

    setTimeout(() => {
        btn.textContent = textVerstuur;
    }, 3000);

  const newChats = responseDOM.querySelector('#text-miniload');
  const currentChats = document.querySelector('#text-miniload');
    currentChats.outerHTML = newChats.outerHTML;
  

  const updatedForm = document.querySelector('[data-miniload="true"]');
  if (updatedForm) updatedForm.reset();
});

</script>

