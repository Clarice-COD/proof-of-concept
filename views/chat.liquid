{% comment %} CHAT FORMULIER {% endcomment %}
<form class="share-questions-form" action="/" method="post" data-miniload="true">
    <h3>Heb je een vraag?</h3>
    <div class="text-field">
        <label>typ hier je vraag</label>
        <textarea type="text" name="text" rows="5" cols="28"></textarea>
    </div>
    <button class="main-btn verzend-btn" type="submit">verzend</button>
</form>

{% comment %} SHARED CHATS {% endcomment %}
{% if chats %}  {% comment %} ideal state {% endcomment %}
    <div class="shared-questions-container">
        {% for chat in chats %}
            <div class="shared-question">
                <picture class="user-icon">
                    <source srcset="/assets/user-question-icon.svg">
                    <img class="user-icon-img" alt="klantprofiel" src="/assets/user-question-icon.svg" width="40">
                </picture>
                <p class="question-text" >{{ chat.text }}</p>
                <time datetime="2025-06-11">11 juni</time>
            </div>
        {% endfor %}  
    </div>
{% else %} {% comment %} empty state {% endcomment %}
    <div class="nothing-found-container">
        <picture class="nothing-found-icon">
            <source srcset="/assets/chat-icon.svg">
            <img src="/assets/chat-icon.svg" width="40">
        </picture>
        <p class="nothing-found-text">Er zijn nog geen berichten gedeeld. Wees de eerste!</p>
    </div>
{% endif %}

<script type="module">
    
    // EventListener voor een formulier die wordt gesubmit 
    document.addEventListener('submit', async function(event) {

    // Selecteerd specifiek een form voor de submit via eventlisener
    const form = event.target


    // Voeg toe als attribute: form-enhanced true aan de form die je enhanced wilt hebben
    if (!form.hasAttribute('data-miniload')) {
      return
    }

    // Overschrijft de default Loading state van de browser...
    event.preventDefault()

    // Verzamel alle formuliervelden van het formulier
    let formData = new FormData(form)

    // Voeg name en value toe aan de submit button indien meerdere submit buttons
    if (event.submitter) {
      formData.append(event.submitter.name, event.submitter.value)
    }

    // Doe een fetch naar de server, net als hoe de browser dit normaal zou doen
    // Gebruik daarvoor het action en method attribuut van het originele formulier
    // Inclusief alle formuliervelden
    const response = await fetch(form.action, {
      method: form.method,
      body: new URLSearchParams(formData)
    })

    // De server redirect op de normale manier, en geeft HTML terug
    // (De server weet niet eens dat deze fetch via client-side JavaScript gebeurde)
    const responseText = await response.text()

    // Normaal zou de browser die HTML parsen en weergeven, maar daar moeten we nu zelf iets mee
    // Parse de nieuwe HTML en maak hiervan een nieuw Document Object Model in het geheugen
    const parser = new DOMParser()
    const responseDOM = parser.parseFromString(responseText, 'text/html')

    // Zoek in die nieuwe HTML DOM onze nieuwe UI state op, die we via Liquid hebben klaargemaakt
    // We gebruiken hiervoor het eerdere data-enhanced attribuut, zodat we weten waar we naar moeten zoeken
    // In de nieuwe HTML zoeken we bijvoorbeeld naar data-enhanced="true" of data-enhanced="formulier-3"
    // (Hierdoor kunnen we ook meerdere formulieren op dezelfde pagina gebruiken)
    const newState = responseDOM.querySelector('[data-miniload="' + form.getAttribute('data-enhanced') + '"]')

    // Overschrijf ons formulier met de nieuwe HTML
    // Hier wil je waarschijnlijk de Loading state vervangen door een Success state
    form.outerHTML = newState.outerHTML

  })

</script>

